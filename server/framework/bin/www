#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { app, metricsApp } = require('../app');
var debug = require('debug')('http');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var metricsPort = normalizePort(process.env.METRICS_PORT || '9000');
metricsApp.set('port', metricsPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var metricsServer = http.createServer(metricsApp);

/**
 * Listen on provided port and metricsPort, on all network interfaces.
 */

server.listen(port);
server.on('error', onErrorGenerator(port));
server.on('listening', onListeningGenerator(server));

metricsServer.listen(metricsPort);
metricsServer.on('error', onErrorGenerator(metricsPort));
metricsServer.on('listening', onListeningGenerator(metricsServer));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorGenerator(port) {
  return function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningGenerator(server) {
  return function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  };
}
